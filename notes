\
no lekas so far
pwd > out | echo hi > in            cat out >>>... done
last command segv when
					env -i..
					unset PATH PWD SHLVL _
					env
cat << l | cat 


#include "../minishell.h"
#include <stdio.h>
#include <sys/fcntl.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>

#define HEREDOC_FILENAME_LEN 20
#define HEREDOC_BUFFER_SIZE 1024

char *generate_random_filename(void) {
    char *filename = malloc(HEREDOC_FILENAME_LEN + 1);
    if (!filename) {
        perror("malloc");
        return NULL;
    }

    int fd = open("/dev/urandom", O_RDONLY);
    if (fd == -1) {
        perror("open /dev/urandom");
        free(filename);
        return NULL;
    }

    for (int i = 0; i < HEREDOC_FILENAME_LEN; i++) {
        unsigned char c;
        if (read(fd, &c, 1) != 1) {
            perror("read /dev/urandom");
            close(fd);
            free(filename);
            return NULL;
        }
        filename[i] = 'a' + (c % 26);  // Generate lowercase letters
    }
    filename[HEREDOC_FILENAME_LEN] = '\0';

    close(fd);
    return filename;
}

int process_heredoc(t_token *token, t_line *command) {
    char *filename = generate_random_filename();
    if (!filename) {
        return -1;
    }

    int fd = open(filename, O_RDWR | O_CREAT | O_EXCL, 0600);
    if (fd == -1) {
        perror("open heredoc file");
        free(filename);
        return -1;
    }

    char *delim = ft_strdup(token->next->content);
    if (!delim) {
        perror("ft_strdup");
        close(fd);
        free(filename);
        return -1;
    }

    char *input;
    while (1) {
        input = readline("heredoc> ");
        if (!input || !ft_strcmp(input, delim)) {
            free(input);
            break;
        }
        if (write(fd, input, ft_strlen(input)) == -1 ||
            write(fd, "\n", 1) == -1) {
            perror("write to heredoc file");
            free(input);
            close(fd);
            free(filename);
            free(delim);
            return -1;
        }
        free(input);
    }

    if (lseek(fd, 0, SEEK_SET) == -1) {
        perror("lseek");
        close(fd);
        free(filename);
        free(delim);
        return -1;
    }

    if (command->fd_in != STDIN_FILENO) {
        close(command->fd_in);
    }
    command->fd_in = fd;

    free(filename);
    free(delim);
    return 0;
}

void handle_heredoc(t_line *final, env_vars *list, char **env) {
    (void)list;
    (void)env;

    while (final) {
        t_token *token = final->tokens;
        while (token) {
            if (token->type == 3) {  // Heredoc token
                if (process_heredoc(token, final) == -1) {
                    fprintf(stderr, "Error processing heredoc\n");
                    // Handle error (e.g., set an error flag in your shell struct)
                }
            }
            token = token->next;
        }
        final = final->next;
    }
}
Last edited 1 minute ago